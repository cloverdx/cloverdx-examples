<?xml version="1.0" encoding="UTF-8"?>
<Graph author="JanSlechta" category="dataQuality" created="Thu Sep 18 10:48:48 CEST 2025" guiVersion="7.0.0.15" id="1758618268056" largeIconPath="${PROJECT}/icon/Check-Badge--Streamline-Ultimate-64.png" licenseCode="CLCDSCLOVE85208925SP" mediumIconPath="${PROJECT}/icon/Check-Badge--Streamline-Ultimate-32.png" name="CustomValidator" nature="subgraph" showComponentDetails="true" smallIconPath="${PROJECT}/icon/Check-Badge--Streamline-Ultimate-16.png">
<Global>
<inputPorts>
<singlePort connected="true" name="0"/>
</inputPorts>
<outputPorts>
<singlePort connected="true" name="0"/>
<singlePort connected="true" name="1"/>
</outputPorts>
<Metadata id="Metadata1">
<Record fieldDelimiter="," name="CountryAggregations" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field label="Country" name="country" type="string"/>
<Field label="Not Null Count" name="notNullCount" type="integer"/>
<Field label="Total Record Count" name="recordCount" type="integer"/>
<Field label="Not Null Count Percentage" name="notNullCountPercentage" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter=";" name="Customers" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="customerid" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="firstname" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="lastname" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="address1" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="address2" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="city" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="state" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="zip" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="country" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="region" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="email" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="phone" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="creditcardtype" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="creditcard" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="creditcardexpiration" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="username" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="password" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="age" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="income" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="gender" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter label="Country field" name="COUNTRY_FIELD" public="true" required="true" value="country">
<SingleType edge="Edge8" fieldType="string" name="field"/>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="251" id="Note0" textColor="444444" width="226" x="575" y="125">
<attr name="text"><![CDATA[h6. Generic country field exposed as subgraph attribute]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="125" id="Note1" textColor="444444" width="975" x="350" y="425">
<attr name="text"><![CDATA[h3. Creating custom components - subgraph design
* Input attributes that allows users to create generic components can be created by creating a *public* subgraph parameter
* Properties of the subgraph (Protoperties tab in the Desginer) allows to edit visuals of the comopnent
* Subgraphs can be published in libraries that are easily deployable into additional CloverDX Server instances]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node aggregateKey="${COUNTRY_FIELD}" guiName="Aggregate" guiX="624" guiY="225" id="AGGREGATE" mapping="$country:=$${COUNTRY_FIELD};$notNullCount:=countnonnull($creditcard);$recordCount:=count();" sorted="false" type="AGGREGATE"/>
<Node guiName="Custom coding validation" guiX="1124" guiY="50" id="CUSTOM_CODING_VALIDATION" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// This is rather uncommon approach, but gives you additional flexiblity 
// or you can use it if you prefer to use coding approach instead of visual design
function integer transform() {
	
	// This is just an example of a CTL code, it can be far more complex if needed
	
	// Must be number and start with numbers between 5 and 9
	if (isLong(trim($in.0.phone)) && $in.0.phone ~= "^[5-9].*") {
		$out.0.* = $in.0.*;
		// return value is index of the output port (0 = first output port of the component)
		return 0; 
	} else {
		// if above condition returns false, we will map original data to second output port 
		$out.1.* = $in.0.*;
		// return value is index of the output port (1 = second output port of the component
		return 1;
	}

}
]]></attr>
</Node>
<Node fileURL="${DATAOUT_DIR}/CustomProfilingResults.csv" guiName="Custom Profiling Results" guiX="1124" guiY="225" id="CUSTOM_PROFILING_RESULTS" type="FLAT_FILE_WRITER"/>
<Node debugInput="true" guiName="DebugInput" guiX="50" guiY="50" id="DEBUG_INPUT" recordsNumber="0" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugOutput="true" guiName="DebugOutput" guiX="1523" guiY="50" id="DEBUG_OUTPUT" type="TRASH"/>
<Node debugOutput="true" guiName="DebugOutput" guiX="1523" guiY="125" id="DEBUG_OUTPUT1" type="TRASH"/>
<Node guiName="Map" guiX="895" guiY="225" id="MAP" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.notNullCountPercentage = $in.0.notNullCount / $in.0.recordCount * 100;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="SimpleCopy" guiX="320" guiY="50" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node guiName="SubgraphInput" guiX="235" guiY="-45" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="67" name="0"/>
<Port guiY="142" name="1"/>
</Node>
<Node guiName="SubgraphOutput" guiX="1409" guiY="-45" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="67" name="0"/>
<Port guiY="142" name="1"/>
<Port guiY="217" name="2"/>
</Node>
<Edge fromNode="AGGREGATE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="MAP:0"/>
<Edge fromNode="CUSTOM_CODING_VALIDATION:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge fromNode="CUSTOM_CODING_VALIDATION:1" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 1 (in)" outPort="Port 1 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge fromNode="DEBUG_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT:0"/>
<Edge fromNode="MAP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="CUSTOM_PROFILING_RESULTS:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="CUSTOM_CODING_VALIDATION:0"/>
<Edge fromNode="SIMPLE_COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="AGGREGATE:0"/>
<Edge fromNode="SUBGRAPH_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DEBUG_OUTPUT:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="DEBUG_OUTPUT1:0"/>
</Phase>
</Graph>
