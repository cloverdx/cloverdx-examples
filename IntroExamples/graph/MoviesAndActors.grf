<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Petr" created="Fri Jul 02 14:49:13 CEST 2010" guiVersion="7.0.1.7" id="1278077546166" licenseCode="Commercial Devel" licenseType="Commercial" modified="Tue Feb 23 14:08:47 CET 2016" modifiedBy="jansedlacek" name="graphXMLProcessing" revision="1.97" showComponentDetails="true">
<Global>
<Metadata id="Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="actor" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="actor_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="first_name" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="last_name" nullable="true" shift="0" size="0" type="string"/>
<Field name="movie_id" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="movie" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="movie_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="title" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="description" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="release_year" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="language" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="length" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="rating" nullable="true" shift="0" size="0" type="string"/>
<Field name="category" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="movie_short" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="movie_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="title" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="description" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="release_year" nullable="true" shift="0" size="0" type="integer"/>
<Field name="category" type="string"/>
<Field name="actor_id" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="movie_short_names" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="movie_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="title" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="description" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="release_year" nullable="true" shift="0" size="0" type="integer"/>
<Field name="category" type="string"/>
<Field name="actor" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="DAD8C9" enabled="true" folded="false" fontSize="medium" height="125" id="Note4" textColor="000000" width="1500" x="25" y="0">
<attr name="text"><![CDATA[h3. Working with JSON source file
We have a list of movies and the actors in them. We want to have a reverse list with actors and the movies they are in. Use the provided movies.json file.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" enabled="true" folded="false" fontSize="medium" height="525" id="Note1" textColor="000000" width="325" x="25" y="150">
<attr name="text"><![CDATA[h3. Read JSON file
It reads data from following JSON structure.

{noformat}{
  movies: 
  [ 
   movie: {
       ...
       actor: […]
       }
  ]
}
{noformat}]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" enabled="true" folded="false" fontSize="medium" height="500" id="Note0" textColor="000000" width="700" x="400" y="150">
<attr name="text"><![CDATA[h3. JSON data processing
The structure of input JSON file is defined by XSD so you can use visual mapping editor for defining of mapping input fields to inner clover fields.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" enabled="true" folded="false" fontSize="medium" height="525" id="Note2" textColor="000000" width="375" x="1150" y="150">
<attr name="text"><![CDATA[h3. Write JSON file
It writes data to following JSON structure.

{noformat}
{
  actor: {
       first_name:,
       last_name:,
       movies: […],
    },
  actor: {
       first_name:,
       last_name:,
       movies: […],
    }
...
}
{noformat}
]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node dedupKey="actor_id(a)" enabled="enabled" guiName="1 record per actor" guiX="920" guiY="400" id="DEDUP0" type="DEDUP"/>
<Node guiName="ExtHashJoin" guiX="1170" guiY="525" id="EXT_HASH_JOIN" joinKey="$actor_id=$actor_id" joinType="leftOuter" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.movie_id = $in.0.movie_id;
	$out.0.title = $in.0.title;
	$out.0.description = $in.0.description;
	$out.0.release_year = $in.0.release_year;
	$out.0.category = $in.0.category;
	$out.0.actor = $in.1.first_name + " " + $in.1.last_name;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="join actor_id to movie" guiX="695" guiY="525" id="EXT_HASH_JOIN0" joinKey="$movie_id=$movie_id" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.actor_id = $in.0.actor_id;
	$out.0.movie_id = $in.1.movie_id;
	$out.0.release_year = $in.1.release_year;
	$out.0.title = $in.1.title;
	$out.0.description = $in.1.description;
	$out.0.category = $in.1.category;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="actor_id" guiX="720" guiY="400" id="EXT_SORT0" sortKey="actor_id(a)" type="EXT_SORT"/>
<Node fileURL="${DATAOUT_DIR}/MoviesAndActors.txt" guiName="FlatFileWriter" guiX="1345" guiY="525" id="FLAT_FILE_WRITER" type="FLAT_FILE_WRITER"/>
<Node charset="UTF-8" enabled="enabled" guiName="Read Movies.json" guiX="120" guiY="400" id="READ_MOVIES_JSON" schema="${DATAIN_DIR}/others/json/Movies_json.xsd" sourceUri="${DATAIN_DIR}/others/Movies.json" type="JSON_EXTRACT">
<attr name="mapping"><![CDATA[<Mappings>
		<Mapping element="movies">
			<Mapping element="movie" outPort="1">
				<Mapping element="actor" outPort="0" parentKey="movie_id" generatedKey="movie_id"
						xmlFields="{}actor_id;{}first_name;{}last_name"
						cloverFields="actor_id;first_name;last_name">
				</Mapping>
			</Mapping>
		</Mapping>
</Mappings>
]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="470" guiY="400" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Edge fromNode="DEDUP0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge7" inPort="Port 1 (slave)" metadata="Metadata5" outPort="Port 0 (unique)" toNode="EXT_HASH_JOIN:1"/>
<Edge fromNode="EXT_HASH_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="FLAT_FILE_WRITER:0"/>
<Edge fromNode="EXT_HASH_JOIN0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (driver)" metadata="Metadata1" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN:0"/>
<Edge fromNode="EXT_SORT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEDUP0:0"/>
<Edge fromNode="READ_MOVIES_JSON:0" guiBendpoints="310:474|310:400" guiLocks="310|292|null" guiRouter="Manual" id="Edge1" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="SIMPLE_COPY1:0"/>
<Edge fromNode="READ_MOVIES_JSON:1" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge0" inPort="Port 1 (slave)" metadata="Metadata0" outPort="Port 1 (out)" toNode="EXT_HASH_JOIN0:1"/>
<Edge fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="EXT_SORT0:0"/>
<Edge fromNode="SIMPLE_COPY1:1" guiBendpoints="427:477|427:539" guiLocks="427|null|null" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (driver)" outPort="Port 1 (out)" toNode="EXT_HASH_JOIN0:0"/>
</Phase>
</Graph>
